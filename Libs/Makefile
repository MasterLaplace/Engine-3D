##
## EPITECH PROJECT, 2023
## Title: Laplace Libraries v1.0.0
## Author: MasterLaplace
## Created: 2023-10-13
## File description:
## Makefile
##

-include .env
export

SRC_LERROR 	=	$(wildcard LaplaceError/*.c)
SRC_LLINK 	=	$(wildcard LaplaceLink/*.c)
SRC_LMAP 	=	$(wildcard LaplaceMap/*.c)
SRC_LLIB 	=	$(wildcard LaplaceLib/*.c)

SRC_TEST 	=	$(wildcard tests/*/*.c)

OBJ_LERROR 	=	$(SRC_LERROR:.c=.o)
OBJ_LLINK 	=	$(SRC_LLINK:.c=.o)
OBJ_LMAP 	=	$(SRC_LMAP:.c=.o)
OBJ_LLIB 	=	$(SRC_LLIB:.c=.o)

OBJ_TEST 	=	$(SRC_TEST:.c=.o)

INCLUDE_LERROR =	-I LaplaceError/include
INCLUDE_LLINK 	=	-I LaplaceLink/include
INCLUDE_LMAP 	=	-I LaplaceMap/include
INCLUDE_LLIB 	=	-I LaplaceLib/include

ifeq ($(OS), linux)
CC			=	gcc
NAME_LERROR =	libLaplaceError.a
NAME_LLINK 	=	libLaplaceLink.a
NAME_LMAP 	=	libLaplaceMap.a
NAME_LLIB 	=	libLaplaceLib.a
NAME_TEST 	=	unit_tests.out
endif
ifeq ($(OS), windows)
CC			=	x86_64-w64-mingw32-gcc
NAME_LERROR =	libLaplaceError.dll
NAME_LLINK 	=	libLaplaceLink.dll
NAME_LMAP 	=	libLaplaceMap.dll
NAME_LLIB 	=	libLaplaceLib.dll
NAME_TEST 	=	unit_tests.exe
endif
ifeq ($(OS), macos || $(OS), bsd)
CC			=	clang
NAME_LERROR =	libLaplaceError.dylib
NAME_LLINK 	=	libLaplaceLink.dylib
NAME_LMAP 	=	libLaplaceMap.dylib
NAME_LLIB 	=	libLaplaceLib.dylib
NAME_TEST 	=	unit_tests.out
endif

CFLAGS =	-Wall -Werror -Wpedantic $(INCLUDE_LLIB) $(INCLUDE_LLINK) $(INCLUDE_LMAP) $(INCLUDE_LERROR)
LDFLAGS =	-L. -lLaplaceLib -lLaplaceLink -lLaplaceMap -lLaplaceError
FASTFLAGS =	-Ofast -march=native -flto -fomit-frame-pointer \
			-fopenmp -fprefetch-loop-arrays -pipe

all:	$(NAME_LLIB) $(NAME_LLINK) $(NAME_LMAP) $(NAME_LERROR)

$(NAME_LERROR): SRC_COUNT := $(words $(SRC_LERROR))
$(NAME_LERROR):	$(OBJ_LERROR)
	@$(ECHO)
	@-($(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE) \
	"Lib LERROR sucessfully build â›½."$(DEFAULT))
	@ar rc $(NAME_LERROR) $(OBJ_LERROR)

$(NAME_LLINK): 	SRC_COUNT := $(words $(SRC_LLINK))
$(NAME_LLINK):	$(OBJ_LLINK)
	@$(ECHO)
	@-($(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE) \
	"Lib LLINK sucessfully build â›½."$(DEFAULT))
	@ar rc $(NAME_LLINK) $(OBJ_LLINK)

$(NAME_LMAP): 	SRC_COUNT := $(words $(SRC_LMAP))
$(NAME_LMAP):	$(OBJ_LMAP)
	@$(ECHO)
	@-($(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE) \
	"Lib LMAP sucessfully build â›½."$(DEFAULT))
	@ar rc $(NAME_LMAP) $(OBJ_LMAP)

$(NAME_LLIB): 	SRC_COUNT := $(words $(SRC_LLIB))
$(NAME_LLIB):	$(OBJ_LLIB)
	@$(ECHO)
	@-($(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE) \
	"Lib LLIB sucessfully build â›½."$(DEFAULT))
	@ar rc $(NAME_LLIB) $(OBJ_LLIB)

llib:	$(NAME_LLIB)
llink:	$(NAME_LLINK)
lmap:	$(NAME_LMAP)
lerror:	$(NAME_LERROR)

clean:
	@$(RM) $(OBJ_LERROR)
	@$(RM) $(OBJ_LLINK)
	@$(RM) $(OBJ_LMAP)
	@$(RM) $(OBJ_LLIB)
	@$(RM) $(OBJ_TEST)
	@-$(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE)" CLEAN LIBS ðŸ’¨"$(DEFAULT)

fclean:	clean
	@$(RM) $(NAME_LERROR)
	@$(RM) $(NAME_LLINK)
	@$(RM) $(NAME_LMAP)
	@$(RM) $(NAME_LLIB)
	@$(RM) $(NAME_TEST)
	@find -type f -name "*.gcda" -delete
	@find -type f -name "*.gcno" -delete
	@-$(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE)" FCLEAN LIBS ðŸ§»"$(DEFAULT)

re:	fclean all

debug:	CFLAGS += -g3 -ggdb
debug:	FASTFLAGS = -Og -pipe
debug:	re

gprof:	CFLAGS += -pg
gprof:	FASTFLAGS += -fno-omit-frame-pointer
gprof:	re

tests_run:	CFLAGS += --coverage -lcriterion -Wno-deprecated-declarations
tests_run: 	SRC_COUNT := $(words $(SRC_TEST))
tests_run:	re $(OBJ_TEST)
	@$(CC) -o $(NAME_TEST) $(OBJ_TEST) $(CFLAGS) $(LDFLAGS) $(FASTFLAGS)
	@$(ECHO)
	@-($(ECHO) $(BOLD) $(GREEN)âœ“$(LIGHT_BLUE) \
	"Lib TEST sucessfully build â›½."$(DEFAULT))
	@./$(NAME_TEST)

%.o: %.c
	@$(eval NB=$(shell echo $$(($(NB)+1))))
	@-$(CC) -c -o $@ $< $(CFLAGS) $(LDFLAGS) $(FASTFLAGS) \
	&& python3 ../Scripts/improve_build.py $< $(NB) $(SRC_COUNT)

## HELP MODE

help:
	@$(ECHO) $(BOLD) $(GREEN)"\nâ–º LIBS HELP ðŸ“œ !"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make llib: Build LaplaceLib Library ðŸ“š"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make llink: Build LaplaceLink Library ðŸ“š"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make lmap: Build LaplaceMap Library ðŸ“š"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make lerror: Build LaplaceError Library ðŸ“š"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make all: Build all Laplace Libraries ðŸ“š"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make clean: Clean all Laplace Libraries ðŸ§¹"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make fclean: Clean all Laplace Libraries ðŸ§¹"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make re: Clean all Laplace Libraries ðŸ§¹"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make debug: Build all Laplace Libraries in debug mode ðŸ”§"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make gprof: Build all Laplace Libraries in gprof mode ðŸ¤–"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make tests_run: Build all Laplace Libraries in tests mode ðŸ§ª"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make help: Show this help ðŸ“œ"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"â–º make version: Show the version of the Laplace Libraries ðŸ“œ"$(DEFAULT)

version:
	@$(ECHO) $(BOLD) $(GREEN)"\nâ–º LIBS VERSION ðŸ“œ !"$(DEFAULT)
	@$(ECHO) $(BOLD) $(LIGHT_BLUE)"\nâ–º Laplace Library:$(shell cat VERSION)"$(DEFAULT)

.PHONY:	all clean fclean re debug tests_run
